# frozen_string_literal: true
require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe DepartmentsController, type: :controller do
  # TODO: test with StaffProfile instead of user
  let(:department_head) { FactoryBot.create(:user) }
  let(:admin_assistant) { FactoryBot.create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Department. As you add validations to Department, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { head_id: department_head.id,
      admin_assistant_ids: [admin_assistant.id],
      name: "valid department" }
  end

  let(:invalid_attributes) do
    { name: "" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DepartmentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:user) { FactoryBot.create :user }
  before do
    sign_in user
  end

  describe "GET #index" do
    it "returns a success response" do
      FactoryBot.create(:department)
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
      assert_equal Department.all, assigns(:departments)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      department = FactoryBot.create(:department)
      get :show, params: { id: department.to_param }, session: valid_session
      expect(response).to be_successful
      assert_equal department, assigns(:department)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
      expect(assigns(:department)).to be_a(Department)
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      department = FactoryBot.create(:department)
      get :edit, params: { id: department.to_param }, session: valid_session
      expect(response).to be_successful
      assert_equal department, assigns(:department)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Department" do
        expect do
          post :create, params: { department: valid_attributes }, session: valid_session
        end.to change(Department, :count).by(1)
      end

      it "redirects to the created department" do
        post :create, params: { department: valid_attributes }, session: valid_session
        department = Department.last
        expect(response).to redirect_to(department)
        assert_equal department, assigns(:department)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { department: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(assigns(:department)).to be_a(Department)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        { name: "new name" }
      end

      it "updates the requested department" do
        department = FactoryBot.create(:department)
        put :update, params: { id: department.to_param, department: new_attributes }, session: valid_session
        department.reload
        expect(department.name).to eq("new name")
      end

      it "redirects to the department" do
        department = FactoryBot.create(:department)
        put :update, params: { id: department.to_param, department: valid_attributes }, session: valid_session
        expect(response).to redirect_to(department)
        expect(assigns(:department)).to be_a(Department)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        department = FactoryBot.create(:department)
        put :update, params: { id: department.to_param, department: invalid_attributes }, session: valid_session
        expect(response).to be_successful
        expect(assigns(:department).attributes.with_indifferent_access).to include(invalid_attributes)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested department" do
      department = FactoryBot.create(:department)
      expect do
        delete :destroy, params: { id: department.to_param }, session: valid_session
      end.to change(Department, :count).by(-1)
    end

    it "redirects to the departments list" do
      department = FactoryBot.create(:department)
      delete :destroy, params: { id: department.to_param }, session: valid_session
      expect(response).to redirect_to(departments_url)
    end
  end
end
